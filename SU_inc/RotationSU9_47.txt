 /******************************************************************************
 *    This program is free software: you can redistribute it and/or modify     *
 *   it under the terms of the GNU General Public License as published by      *
 *   the Free Software Foundation, either version 3 of the License, or         *
 *   (at your option) any later version.                                       *
 *                                                                             *
 *   This program is distributed in the hope that it will be useful,           *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *
 *   GNU General Public License for more details.                              *
 *                                                                             *
 *   You should have received a copy of the GNU General Public License         *
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.     *
 *                                                                             *   
 *   Authors:                                                                  *
 *      Carlos Arguelles (University of Wisconsin Madison)                     * 
 *         carguelles@icecube.wisc.edu                                         *
 *      Jordi Salvado (University of Wisconsin Madison)                        *
 *         jsalvado@icecube.wisc.edu                                           *
 *      Christopher Weaver (University of Wisconsin Madison)                   * 
 *         cweaver@icecube.wisc.edu                                            *
 ******************************************************************************/
(suv_rot) . components[0]+=suv.components[0];
(suv_rot) . components[1]+=suv.components[1];
(suv_rot) . components[2]+=suv.components[2];
(suv_rot) . components[3]+=cos(th)*suv.components[3] - sin(th)*(cos(del)*suv.components[6] + sin(del)*suv.components[54]);
(suv_rot) . components[4]+=suv.components[4];
(suv_rot) . components[5]+=suv.components[5];
(suv_rot) . components[6]+=cos(del)*sin(th)*suv.components[3] + cos(th)*suv.components[6] - sin(del)*sin(th)*suv.components[27];
(suv_rot) . components[7]+=suv.components[7];
(suv_rot) . components[8]+=suv.components[8];
(suv_rot) . components[9]+=suv.components[9];
(suv_rot) . components[10]+=suv.components[10];
(suv_rot) . components[11]+=suv.components[11];
(suv_rot) . components[12]+=cos(th)*suv.components[12] - sin(th)*(cos(del)*suv.components[15] + sin(del)*suv.components[55]);
(suv_rot) . components[13]+=suv.components[13];
(suv_rot) . components[14]+=suv.components[14];
(suv_rot) . components[15]+=cos(del)*sin(th)*suv.components[12] + cos(th)*suv.components[15] - sin(del)*sin(th)*suv.components[28];
(suv_rot) . components[16]+=suv.components[16];
(suv_rot) . components[17]+=suv.components[17];
(suv_rot) . components[18]+=suv.components[18];
(suv_rot) . components[19]+=suv.components[19];
(suv_rot) . components[20]+=suv.components[20];
(suv_rot) . components[21]+=cos(th)*suv.components[21] - sin(th)*(cos(del)*suv.components[24] + sin(del)*suv.components[56]);
(suv_rot) . components[22]+=suv.components[22];
(suv_rot) . components[23]+=suv.components[23];
(suv_rot) . components[24]+=cos(del)*sin(th)*suv.components[21] + cos(th)*suv.components[24] - sin(del)*sin(th)*suv.components[29];
(suv_rot) . components[25]+=suv.components[25];
(suv_rot) . components[26]+=suv.components[26];
(suv_rot) . components[27]+=sin(del)*sin(th)*suv.components[6] + cos(th)*suv.components[27] - cos(del)*sin(th)*suv.components[54];
(suv_rot) . components[28]+=sin(del)*sin(th)*suv.components[15] + cos(th)*suv.components[28] - cos(del)*sin(th)*suv.components[55];
(suv_rot) . components[29]+=sin(del)*sin(th)*suv.components[24] + cos(th)*suv.components[29] - cos(del)*sin(th)*suv.components[56];
(suv_rot) . components[30]+=(5*(5 + 3*cos(2*th))*suv.components[30] + 2*sin(th)*(10*sqrt(6)*cos(th)*(cos(del)*suv.components[33] + sin(del)*suv.components[57]) + sin(th)*(sqrt(15)*suv.components[40] + sqrt(10)*suv.components[50] + 5*sqrt(14)*suv.components[60])))/40.;
(suv_rot) . components[31]+=cos(th)*suv.components[31] - sin(th)*(cos(del)*suv.components[42] + sin(del)*suv.components[58]);
(suv_rot) . components[32]+=cos(th)*suv.components[32] - sin(th)*(cos(del)*suv.components[51] + sin(del)*suv.components[59]);
(suv_rot) . components[33]+=(cos(del)*cos(del)*cos(2*th) + sin(del)*sin(del))*suv.components[33] + (cos(del)*sin(th)*(-60*sin(del)*sin(th)*suv.components[57] + cos(th)*(-15*sqrt(6)*suv.components[30] + 3*sqrt(10)*suv.components[40] + 2*sqrt(15)*suv.components[50] + 10*sqrt(21)*suv.components[60])))/30.;
(suv_rot) . components[34]+=cos(th)*suv.components[34] + sin(th)*(-(cos(del)*suv.components[61]) + sin(del)*suv.components[69]);
(suv_rot) . components[35]+=cos(th)*suv.components[35] + sin(th)*(-(cos(del)*suv.components[62]) + sin(del)*suv.components[78]);
(suv_rot) . components[36]+=suv.components[36];
(suv_rot) . components[37]+=suv.components[37];
(suv_rot) . components[38]+=suv.components[38];
(suv_rot) . components[39]+=cos(th)*suv.components[39] + sin(th)*(-(sin(del)*suv.components[42]) + cos(del)*suv.components[58]);
(suv_rot) . components[40]+=(6*sqrt(15)*sin(th)*sin(th)*suv.components[30] + 3*(39 + cos(2*th))*suv.components[40] - 6*sqrt(10)*sin(2*th)*(cos(del)*suv.components[33] + sin(del)*suv.components[57]) - 2*sqrt(6)*sin(th)*sin(th)*(suv.components[50] + sqrt(35)*suv.components[60]))/120.;
(suv_rot) . components[41]+=suv.components[41];
(suv_rot) . components[42]+=cos(del)*sin(th)*suv.components[31] + sin(del)*sin(th)*suv.components[39] + cos(th)*suv.components[42];
(suv_rot) . components[43]+=suv.components[43];
(suv_rot) . components[44]+=suv.components[44];
(suv_rot) . components[45]+=suv.components[45];
(suv_rot) . components[46]+=suv.components[46];
(suv_rot) . components[47]+=suv.components[47];
(suv_rot) . components[48]+=cos(th)*suv.components[48] + sin(th)*(-(sin(del)*suv.components[51]) + cos(del)*suv.components[59]);
(suv_rot) . components[49]+=suv.components[49];
(suv_rot) . components[50]+=((59 + cos(2*th))*suv.components[50] - 2*sqrt(15)*sin(2*th)*(cos(del)*suv.components[33] + sin(del)*suv.components[57]) + sin(th)*sin(th)*(3*sqrt(10)*suv.components[30] - sqrt(6)*suv.components[40] - 2*sqrt(35)*suv.components[60]))/60.;
(suv_rot) . components[51]+=cos(del)*sin(th)*suv.components[32] + sin(del)*sin(th)*suv.components[48] + cos(th)*suv.components[51];
(suv_rot) . components[52]+=suv.components[52];
(suv_rot) . components[53]+=suv.components[53];
(suv_rot) . components[54]+=sin(del)*sin(th)*suv.components[3] + cos(del)*sin(th)*suv.components[27] + cos(th)*suv.components[54];
(suv_rot) . components[55]+=sin(del)*sin(th)*suv.components[12] + cos(del)*sin(th)*suv.components[28] + cos(th)*suv.components[55];
(suv_rot) . components[56]+=sin(del)*sin(th)*suv.components[21] + cos(del)*sin(th)*suv.components[29] + cos(th)*suv.components[56];
(suv_rot) . components[57]+=-(sin(2*del)*sin(th)*sin(th)*suv.components[33]) + (cos(th)*cos(th) + cos(2*del)*sin(th)*sin(th))*suv.components[57] + (sin(del)*sin(2*th)*(-15*sqrt(6)*suv.components[30] + 3*sqrt(10)*suv.components[40] + 2*sqrt(15)*suv.components[50] + 10*sqrt(21)*suv.components[60]))/60.;
(suv_rot) . components[58]+=sin(del)*sin(th)*suv.components[31] - cos(del)*sin(th)*suv.components[39] + cos(th)*suv.components[58];
(suv_rot) . components[59]+=sin(del)*sin(th)*suv.components[32] - cos(del)*sin(th)*suv.components[48] + cos(th)*suv.components[59];
(suv_rot) . components[60]+=(15*sqrt(14)*sin(th)*sin(th)*suv.components[30] - sqrt(35)*sin(th)*sin(th)*(sqrt(6)*suv.components[40] + 2*suv.components[50]) - 10*sqrt(21)*sin(2*th)*(cos(del)*suv.components[33] + sin(del)*suv.components[57]) + 5*(5 + 7*cos(2*th))*suv.components[60])/60.;
(suv_rot) . components[61]+=cos(del)*sin(th)*suv.components[34] + cos(th)*suv.components[61] + sin(del)*sin(th)*suv.components[66];
(suv_rot) . components[62]+=cos(del)*sin(th)*suv.components[35] + cos(th)*suv.components[62] + sin(del)*sin(th)*suv.components[75];
(suv_rot) . components[63]+=suv.components[63];
(suv_rot) . components[64]+=suv.components[64];
(suv_rot) . components[65]+=suv.components[65];
(suv_rot) . components[66]+=cos(th)*suv.components[66] - sin(th)*(sin(del)*suv.components[61] + cos(del)*suv.components[69]);
(suv_rot) . components[67]+=suv.components[67];
(suv_rot) . components[68]+=suv.components[68];
(suv_rot) . components[69]+=-(sin(del)*sin(th)*suv.components[34]) + cos(del)*sin(th)*suv.components[66] + cos(th)*suv.components[69];
(suv_rot) . components[70]+=suv.components[70];
(suv_rot) . components[71]+=suv.components[71];
(suv_rot) . components[72]+=suv.components[72];
(suv_rot) . components[73]+=suv.components[73];
(suv_rot) . components[74]+=suv.components[74];
(suv_rot) . components[75]+=cos(th)*suv.components[75] - sin(th)*(sin(del)*suv.components[62] + cos(del)*suv.components[78]);
(suv_rot) . components[76]+=suv.components[76];
(suv_rot) . components[77]+=suv.components[77];
(suv_rot) . components[78]+=-(sin(del)*sin(th)*suv.components[35]) + cos(del)*sin(th)*suv.components[75] + cos(th)*suv.components[78];
(suv_rot) . components[79]+=suv.components[79];
(suv_rot) . components[80]+=suv.components[80];