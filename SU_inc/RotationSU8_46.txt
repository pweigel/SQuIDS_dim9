 /******************************************************************************
 *    This program is free software: you can redistribute it and/or modify     *
 *   it under the terms of the GNU General Public License as published by      *
 *   the Free Software Foundation, either version 3 of the License, or         *
 *   (at your option) any later version.                                       *
 *                                                                             *
 *   This program is distributed in the hope that it will be useful,           *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *
 *   GNU General Public License for more details.                              *
 *                                                                             *
 *   You should have received a copy of the GNU General Public License         *
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.     *
 *                                                                             *   
 *   Authors:                                                                  *
 *      Carlos Arguelles (University of Wisconsin Madison)                     * 
 *         carguelles@icecube.wisc.edu                                         *
 *      Jordi Salvado (University of Wisconsin Madison)                        *
 *         jsalvado@icecube.wisc.edu                                           *
 *      Christopher Weaver (University of Wisconsin Madison)                   * 
 *         cweaver@icecube.wisc.edu                                            *
 ******************************************************************************/
(suv_rot) . components[0]+=suv.components[0];
(suv_rot) . components[1]+=suv.components[1];
(suv_rot) . components[2]+=suv.components[2];
(suv_rot) . components[3]+=cos(th)*suv.components[3] - sin(th)*(cos(del)*suv.components[5] + sin(del)*suv.components[40]);
(suv_rot) . components[4]+=suv.components[4];
(suv_rot) . components[5]+=cos(del)*sin(th)*suv.components[3] + cos(th)*suv.components[5] - sin(del)*sin(th)*suv.components[24];
(suv_rot) . components[6]+=suv.components[6];
(suv_rot) . components[7]+=suv.components[7];
(suv_rot) . components[8]+=suv.components[8];
(suv_rot) . components[9]+=suv.components[9];
(suv_rot) . components[10]+=suv.components[10];
(suv_rot) . components[11]+=cos(th)*suv.components[11] - sin(th)*(cos(del)*suv.components[13] + sin(del)*suv.components[41]);
(suv_rot) . components[12]+=suv.components[12];
(suv_rot) . components[13]+=cos(del)*sin(th)*suv.components[11] + cos(th)*suv.components[13] - sin(del)*sin(th)*suv.components[25];
(suv_rot) . components[14]+=suv.components[14];
(suv_rot) . components[15]+=suv.components[15];
(suv_rot) . components[16]+=suv.components[16];
(suv_rot) . components[17]+=suv.components[17];
(suv_rot) . components[18]+=suv.components[18];
(suv_rot) . components[19]+=cos(th)*suv.components[19] - sin(th)*(cos(del)*suv.components[21] + sin(del)*suv.components[42]);
(suv_rot) . components[20]+=suv.components[20];
(suv_rot) . components[21]+=cos(del)*sin(th)*suv.components[19] + cos(th)*suv.components[21] - sin(del)*sin(th)*suv.components[26];
(suv_rot) . components[22]+=suv.components[22];
(suv_rot) . components[23]+=suv.components[23];
(suv_rot) . components[24]+=sin(del)*sin(th)*suv.components[5] + cos(th)*suv.components[24] - cos(del)*sin(th)*suv.components[40];
(suv_rot) . components[25]+=sin(del)*sin(th)*suv.components[13] + cos(th)*suv.components[25] - cos(del)*sin(th)*suv.components[41];
(suv_rot) . components[26]+=sin(del)*sin(th)*suv.components[21] + cos(th)*suv.components[26] - cos(del)*sin(th)*suv.components[42];
(suv_rot) . components[27]+=(5*(5 + 3*cos(2*th))*suv.components[27] + 2*sin(th)*(sqrt(15)*sin(th)*suv.components[36] + 10*sqrt(6)*cos(th)*(cos(del)*suv.components[29] + sin(del)*suv.components[43]) + 6*sqrt(10)*sin(th)*suv.components[45]))/40.;
(suv_rot) . components[28]+=cos(th)*suv.components[28] - sin(th)*(cos(del)*suv.components[37] + sin(del)*suv.components[44]);
(suv_rot) . components[29]+=-(sqrt(1.5)*cos(del)*cos(th)*sin(th)*suv.components[27]) + (cos(th)*cos(th) - cos(2*del)*sin(th)*sin(th))*suv.components[29] + (cos(del)*cos(th)*sin(th)*suv.components[36])/sqrt(10) - 2*cos(del)*sin(del)*sin(th)*sin(th)*suv.components[43] + sqrt(0.6)*cos(del)*sin(2*th)*suv.components[45];
(suv_rot) . components[30]+=cos(th)*suv.components[30] + sin(th)*(-(cos(del)*suv.components[46]) + sin(del)*suv.components[53]);
(suv_rot) . components[31]+=cos(th)*suv.components[31] + sin(th)*(-(cos(del)*suv.components[47]) + sin(del)*suv.components[61]);
(suv_rot) . components[32]+=suv.components[32];
(suv_rot) . components[33]+=suv.components[33];
(suv_rot) . components[34]+=suv.components[34];
(suv_rot) . components[35]+=cos(th)*suv.components[35] + sin(th)*(-(sin(del)*suv.components[37]) + cos(del)*suv.components[44]);
(suv_rot) . components[36]+=(2*sqrt(15)*sin(th)*sin(th)*suv.components[27] + (39 + cos(2*th))*suv.components[36] - 2*sqrt(10)*sin(2*th)*(cos(del)*suv.components[29] + sin(del)*suv.components[43]) - 4*sqrt(6)*sin(th)*sin(th)*suv.components[45])/40.;
(suv_rot) . components[37]+=cos(del)*sin(th)*suv.components[28] + sin(del)*sin(th)*suv.components[35] + cos(th)*suv.components[37];
(suv_rot) . components[38]+=suv.components[38];
(suv_rot) . components[39]+=suv.components[39];
(suv_rot) . components[40]+=sin(del)*sin(th)*suv.components[3] + cos(del)*sin(th)*suv.components[24] + cos(th)*suv.components[40];
(suv_rot) . components[41]+=sin(del)*sin(th)*suv.components[11] + cos(del)*sin(th)*suv.components[25] + cos(th)*suv.components[41];
(suv_rot) . components[42]+=sin(del)*sin(th)*suv.components[19] + cos(del)*sin(th)*suv.components[26] + cos(th)*suv.components[42];
(suv_rot) . components[43]+=-(sin(2*del)*sin(th)*sin(th)*suv.components[29]) + (cos(th)*cos(th) + cos(2*del)*sin(th)*sin(th))*suv.components[43] + (sin(del)*sin(2*th)*(-5*sqrt(6)*suv.components[27] + sqrt(10)*suv.components[36] + 4*sqrt(15)*suv.components[45]))/20.;
(suv_rot) . components[44]+=sin(del)*sin(th)*suv.components[28] - cos(del)*sin(th)*suv.components[35] + cos(th)*suv.components[44];
(suv_rot) . components[45]+=(6*sqrt(10)*sin(th)*sin(th)*suv.components[27] - 2*sqrt(6)*sin(th)*sin(th)*suv.components[36] - 4*sqrt(15)*sin(2*th)*(cos(del)*suv.components[29] + sin(del)*suv.components[43]) + 4*(2 + 3*cos(2*th))*suv.components[45])/20.;
(suv_rot) . components[46]+=cos(del)*sin(th)*suv.components[30] + cos(th)*suv.components[46] + sin(del)*sin(th)*suv.components[51];
(suv_rot) . components[47]+=cos(del)*sin(th)*suv.components[31] + cos(th)*suv.components[47] + sin(del)*sin(th)*suv.components[59];
(suv_rot) . components[48]+=suv.components[48];
(suv_rot) . components[49]+=suv.components[49];
(suv_rot) . components[50]+=suv.components[50];
(suv_rot) . components[51]+=cos(th)*suv.components[51] - sin(th)*(sin(del)*suv.components[46] + cos(del)*suv.components[53]);
(suv_rot) . components[52]+=suv.components[52];
(suv_rot) . components[53]+=-(sin(del)*sin(th)*suv.components[30]) + cos(del)*sin(th)*suv.components[51] + cos(th)*suv.components[53];
(suv_rot) . components[54]+=suv.components[54];
(suv_rot) . components[55]+=suv.components[55];
(suv_rot) . components[56]+=suv.components[56];
(suv_rot) . components[57]+=suv.components[57];
(suv_rot) . components[58]+=suv.components[58];
(suv_rot) . components[59]+=cos(th)*suv.components[59] - sin(th)*(sin(del)*suv.components[47] + cos(del)*suv.components[61]);
(suv_rot) . components[60]+=suv.components[60];
(suv_rot) . components[61]+=-(sin(del)*sin(th)*suv.components[31]) + cos(del)*sin(th)*suv.components[59] + cos(th)*suv.components[61];
(suv_rot) . components[62]+=suv.components[62];
(suv_rot) . components[63]+=suv.components[63];