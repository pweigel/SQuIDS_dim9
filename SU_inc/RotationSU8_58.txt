 /******************************************************************************
 *    This program is free software: you can redistribute it and/or modify     *
 *   it under the terms of the GNU General Public License as published by      *
 *   the Free Software Foundation, either version 3 of the License, or         *
 *   (at your option) any later version.                                       *
 *                                                                             *
 *   This program is distributed in the hope that it will be useful,           *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *
 *   GNU General Public License for more details.                              *
 *                                                                             *
 *   You should have received a copy of the GNU General Public License         *
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.     *
 *                                                                             *   
 *   Authors:                                                                  *
 *      Carlos Arguelles (University of Wisconsin Madison)                     * 
 *         carguelles@icecube.wisc.edu                                         *
 *      Jordi Salvado (University of Wisconsin Madison)                        *
 *         jsalvado@icecube.wisc.edu                                           *
 *      Christopher Weaver (University of Wisconsin Madison)                   * 
 *         cweaver@icecube.wisc.edu                                            *
 ******************************************************************************/
(suv_rot) . components[0]+=suv.components[0];
(suv_rot) . components[1]+=suv.components[1];
(suv_rot) . components[2]+=suv.components[2];
(suv_rot) . components[3]+=suv.components[3];
(suv_rot) . components[4]+=cos(th)*suv.components[4] - sin(th)*(cos(del)*suv.components[7] + sin(del)*suv.components[56]);
(suv_rot) . components[5]+=suv.components[5];
(suv_rot) . components[6]+=suv.components[6];
(suv_rot) . components[7]+=cos(del)*sin(th)*suv.components[4] + cos(th)*suv.components[7] - sin(del)*sin(th)*suv.components[32];
(suv_rot) . components[8]+=suv.components[8];
(suv_rot) . components[9]+=suv.components[9];
(suv_rot) . components[10]+=suv.components[10];
(suv_rot) . components[11]+=suv.components[11];
(suv_rot) . components[12]+=cos(th)*suv.components[12] - sin(th)*(cos(del)*suv.components[15] + sin(del)*suv.components[57]);
(suv_rot) . components[13]+=suv.components[13];
(suv_rot) . components[14]+=suv.components[14];
(suv_rot) . components[15]+=cos(del)*sin(th)*suv.components[12] + cos(th)*suv.components[15] - sin(del)*sin(th)*suv.components[33];
(suv_rot) . components[16]+=suv.components[16];
(suv_rot) . components[17]+=suv.components[17];
(suv_rot) . components[18]+=suv.components[18];
(suv_rot) . components[19]+=suv.components[19];
(suv_rot) . components[20]+=cos(th)*suv.components[20] - sin(th)*(cos(del)*suv.components[23] + sin(del)*suv.components[58]);
(suv_rot) . components[21]+=suv.components[21];
(suv_rot) . components[22]+=suv.components[22];
(suv_rot) . components[23]+=cos(del)*sin(th)*suv.components[20] + cos(th)*suv.components[23] - sin(del)*sin(th)*suv.components[34];
(suv_rot) . components[24]+=suv.components[24];
(suv_rot) . components[25]+=suv.components[25];
(suv_rot) . components[26]+=suv.components[26];
(suv_rot) . components[27]+=suv.components[27];
(suv_rot) . components[28]+=cos(th)*suv.components[28] - sin(th)*(cos(del)*suv.components[31] + sin(del)*suv.components[59]);
(suv_rot) . components[29]+=suv.components[29];
(suv_rot) . components[30]+=suv.components[30];
(suv_rot) . components[31]+=cos(del)*sin(th)*suv.components[28] + cos(th)*suv.components[31] - sin(del)*sin(th)*suv.components[35];
(suv_rot) . components[32]+=sin(del)*sin(th)*suv.components[7] + cos(th)*suv.components[32] - cos(del)*sin(th)*suv.components[56];
(suv_rot) . components[33]+=sin(del)*sin(th)*suv.components[15] + cos(th)*suv.components[33] - cos(del)*sin(th)*suv.components[57];
(suv_rot) . components[34]+=sin(del)*sin(th)*suv.components[23] + cos(th)*suv.components[34] - cos(del)*sin(th)*suv.components[58];
(suv_rot) . components[35]+=sin(del)*sin(th)*suv.components[31] + cos(th)*suv.components[35] - cos(del)*sin(th)*suv.components[59];
(suv_rot) . components[36]+=(21*(3 + 2*cos(2*th))*suv.components[36] + sqrt(2)*sin(th)*(42*sqrt(5)*cos(th)*(cos(del)*suv.components[39] + sin(del)*suv.components[60]) + sin(th)*(7*sqrt(3)*suv.components[45] + sqrt(35)*(sqrt(3)*suv.components[54] + 12*suv.components[63]))))/105.;
(suv_rot) . components[37]+=cos(th)*suv.components[37] - sin(th)*(cos(del)*suv.components[47] + sin(del)*suv.components[61]);
(suv_rot) . components[38]+=cos(th)*suv.components[38] - sin(th)*(cos(del)*suv.components[55] + sin(del)*suv.components[62]);
(suv_rot) . components[39]+=-(sqrt(0.4)*cos(del)*sin(2*th)*suv.components[36]) + (cos(del)*cos(del)*cos(2*th) + sin(del)*sin(del))*suv.components[39] + (cos(del)*sin(th)*(-210*sin(del)*sin(th)*suv.components[60] + cos(th)*(7*sqrt(15)*suv.components[45] + 5*sqrt(21)*suv.components[54] + 60*sqrt(7)*suv.components[63])))/105.;
(suv_rot) . components[40]+=suv.components[40];
(suv_rot) . components[41]+=suv.components[41];
(suv_rot) . components[42]+=suv.components[42];
(suv_rot) . components[43]+=suv.components[43];
(suv_rot) . components[44]+=cos(th)*suv.components[44] + sin(th)*(-(sin(del)*suv.components[47]) + cos(del)*suv.components[61]);
(suv_rot) . components[45]+=(7*(59 + cos(2*th))*suv.components[45] - 14*sqrt(15)*sin(2*th)*(cos(del)*suv.components[39] + sin(del)*suv.components[60]) + 2*sin(th)*sin(th)*(14*sqrt(6)*suv.components[36] - sqrt(35)*(suv.components[54] + 4*sqrt(3)*suv.components[63])))/420.;
(suv_rot) . components[46]+=suv.components[46];
(suv_rot) . components[47]+=cos(del)*sin(th)*suv.components[37] + sin(del)*sin(th)*suv.components[44] + cos(th)*suv.components[47];
(suv_rot) . components[48]+=suv.components[48];
(suv_rot) . components[49]+=suv.components[49];
(suv_rot) . components[50]+=suv.components[50];
(suv_rot) . components[51]+=suv.components[51];
(suv_rot) . components[52]+=cos(th)*suv.components[52] + sin(th)*(-(sin(del)*suv.components[55]) + cos(del)*suv.components[62]);
(suv_rot) . components[53]+=suv.components[53];
(suv_rot) . components[54]+=(5*(83 + cos(2*th))*suv.components[54] - 10*sqrt(21)*sin(2*th)*(cos(del)*suv.components[39] + sin(del)*suv.components[60]) + 2*sin(th)*sin(th)*(2*sqrt(210)*suv.components[36] - sqrt(35)*suv.components[45] - 20*sqrt(3)*suv.components[63]))/420.;
(suv_rot) . components[55]+=cos(del)*sin(th)*suv.components[38] + sin(del)*sin(th)*suv.components[52] + cos(th)*suv.components[55];
(suv_rot) . components[56]+=sin(del)*sin(th)*suv.components[4] + cos(del)*sin(th)*suv.components[32] + cos(th)*suv.components[56];
(suv_rot) . components[57]+=sin(del)*sin(th)*suv.components[12] + cos(del)*sin(th)*suv.components[33] + cos(th)*suv.components[57];
(suv_rot) . components[58]+=sin(del)*sin(th)*suv.components[20] + cos(del)*sin(th)*suv.components[34] + cos(th)*suv.components[58];
(suv_rot) . components[59]+=sin(del)*sin(th)*suv.components[28] + cos(del)*sin(th)*suv.components[35] + cos(th)*suv.components[59];
(suv_rot) . components[60]+=-(sqrt(0.4)*sin(del)*sin(2*th)*suv.components[36]) - 2*cos(del)*sin(del)*sin(th)*sin(th)*suv.components[39] + (cos(del)*cos(del) + cos(2*th)*sin(del)*sin(del))*suv.components[60] + (sin(del)*sin(2*th)*(7*sqrt(15)*suv.components[45] + 5*sqrt(21)*suv.components[54] + 60*sqrt(7)*suv.components[63]))/210.;
(suv_rot) . components[61]+=sin(del)*sin(th)*suv.components[37] - cos(del)*sin(th)*suv.components[44] + cos(th)*suv.components[61];
(suv_rot) . components[62]+=sin(del)*sin(th)*suv.components[38] - cos(del)*sin(th)*suv.components[52] + cos(th)*suv.components[62];
(suv_rot) . components[63]+=(2*sin(th)*sin(th)*(6*sqrt(70)*suv.components[36] - sqrt(3)*(sqrt(35)*suv.components[45] + 5*suv.components[54])))/105. - (2*sin(2*th)*(cos(del)*suv.components[39] + sin(del)*suv.components[60]))/sqrt(7) + ((3 + 4*cos(2*th))*suv.components[63])/7.;