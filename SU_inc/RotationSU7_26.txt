 /******************************************************************************
 *    This program is free software: you can redistribute it and/or modify     *
 *   it under the terms of the GNU General Public License as published by      *
 *   the Free Software Foundation, either version 3 of the License, or         *
 *   (at your option) any later version.                                       *
 *                                                                             *
 *   This program is distributed in the hope that it will be useful,           *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *
 *   GNU General Public License for more details.                              *
 *                                                                             *
 *   You should have received a copy of the GNU General Public License         *
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.     *
 *                                                                             *   
 *   Authors:                                                                  *
 *      Carlos Arguelles (University of Wisconsin Madison)                     * 
 *         carguelles@icecube.wisc.edu                                         *
 *      Jordi Salvado (University of Wisconsin Madison)                        *
 *         jsalvado@icecube.wisc.edu                                           *
 *      Christopher Weaver (University of Wisconsin Madison)                   * 
 *         cweaver@icecube.wisc.edu                                            *
 ******************************************************************************/
(suv_rot) . components[0]+=suv.components[0];
(suv_rot) . components[1]+=cos(th)*suv.components[1] - sin(th)*(cos(del)*suv.components[5] + sin(del)*suv.components[35]);
(suv_rot) . components[2]+=suv.components[2];
(suv_rot) . components[3]+=suv.components[3];
(suv_rot) . components[4]+=suv.components[4];
(suv_rot) . components[5]+=cos(del)*sin(th)*suv.components[1] + cos(th)*suv.components[5] - sin(del)*sin(th)*suv.components[7];
(suv_rot) . components[6]+=suv.components[6];
(suv_rot) . components[7]+=sin(del)*sin(th)*suv.components[5] + cos(th)*suv.components[7] - cos(del)*sin(th)*suv.components[35];
(suv_rot) . components[8]+=(15*(3 + cos(2*th))*suv.components[8] + 30*sin(2*th)*(cos(del)*suv.components[12] + sin(del)*suv.components[36]) + sin(th)*sin(th)*(10*sqrt(3)*suv.components[16] + 5*sqrt(6)*suv.components[24] + 3*sqrt(10)*suv.components[32] + 12*sqrt(15)*suv.components[40]))/60.;
(suv_rot) . components[9]+=cos(th)*suv.components[9] - sin(th)*(cos(del)*suv.components[19] + sin(del)*suv.components[37]);
(suv_rot) . components[10]+=cos(th)*suv.components[10] - sin(th)*(cos(del)*suv.components[26] + sin(del)*suv.components[38]);
(suv_rot) . components[11]+=cos(th)*suv.components[11] - sin(th)*(cos(del)*suv.components[33] + sin(del)*suv.components[39]);
(suv_rot) . components[12]+=-(cos(del)*cos(th)*sin(th)*suv.components[8]) + (cos(th)*cos(th) - cos(2*del)*sin(th)*sin(th))*suv.components[12] + (cos(del)*sin(th)*(-60*sin(del)*sin(th)*suv.components[36] + cos(th)*(10*sqrt(3)*suv.components[16] + 5*sqrt(6)*suv.components[24] + 3*sqrt(10)*suv.components[32] + 12*sqrt(15)*suv.components[40])))/30.;
(suv_rot) . components[13]+=cos(th)*suv.components[13] + sin(th)*(-(cos(del)*suv.components[41]) + sin(del)*suv.components[47]);
(suv_rot) . components[14]+=suv.components[14];
(suv_rot) . components[15]+=cos(th)*suv.components[15] + sin(th)*(-(sin(del)*suv.components[19]) + cos(del)*suv.components[37]);
(suv_rot) . components[16]+=(5*(11 + cos(2*th))*suv.components[16] - 10*sqrt(3)*sin(2*th)*(cos(del)*suv.components[12] + sin(del)*suv.components[36]) + sin(th)*sin(th)*(10*sqrt(3)*suv.components[8] - 5*sqrt(2)*suv.components[24] - sqrt(5)*(sqrt(6)*suv.components[32] + 12*suv.components[40])))/60.;
(suv_rot) . components[17]+=suv.components[17];
(suv_rot) . components[18]+=suv.components[18];
(suv_rot) . components[19]+=cos(del)*sin(th)*suv.components[9] + sin(del)*sin(th)*suv.components[15] + cos(th)*suv.components[19];
(suv_rot) . components[20]+=suv.components[20];
(suv_rot) . components[21]+=suv.components[21];
(suv_rot) . components[22]+=cos(th)*suv.components[22] + sin(th)*(-(sin(del)*suv.components[26]) + cos(del)*suv.components[38]);
(suv_rot) . components[23]+=suv.components[23];
(suv_rot) . components[24]+=(5*(23 + cos(2*th))*suv.components[24] - 10*sqrt(6)*sin(2*th)*(cos(del)*suv.components[12] + sin(del)*suv.components[36]) + 2*sin(th)*sin(th)*(5*sqrt(6)*suv.components[8] - 5*sqrt(2)*suv.components[16] - sqrt(15)*suv.components[32] - 6*sqrt(10)*suv.components[40]))/120.;
(suv_rot) . components[25]+=suv.components[25];
(suv_rot) . components[26]+=cos(del)*sin(th)*suv.components[10] + sin(del)*sin(th)*suv.components[22] + cos(th)*suv.components[26];
(suv_rot) . components[27]+=suv.components[27];
(suv_rot) . components[28]+=suv.components[28];
(suv_rot) . components[29]+=cos(th)*suv.components[29] + sin(th)*(-(sin(del)*suv.components[33]) + cos(del)*suv.components[39]);
(suv_rot) . components[30]+=suv.components[30];
(suv_rot) . components[31]+=suv.components[31];
(suv_rot) . components[32]+=(3*(39 + cos(2*th))*suv.components[32] - 6*sqrt(10)*sin(2*th)*(cos(del)*suv.components[12] + sin(del)*suv.components[36]) + 2*sin(th)*sin(th)*(3*sqrt(10)*suv.components[8] - sqrt(30)*suv.components[16] - sqrt(15)*suv.components[24] - 6*sqrt(6)*suv.components[40]))/120.;
(suv_rot) . components[33]+=cos(del)*sin(th)*suv.components[11] + sin(del)*sin(th)*suv.components[29] + cos(th)*suv.components[33];
(suv_rot) . components[34]+=suv.components[34];
(suv_rot) . components[35]+=sin(del)*sin(th)*suv.components[1] + cos(del)*sin(th)*suv.components[7] + cos(th)*suv.components[35];
(suv_rot) . components[36]+=-(sin(2*del)*sin(th)*sin(th)*suv.components[12]) + (cos(th)*cos(th) + cos(2*del)*sin(th)*sin(th))*suv.components[36] + (sin(del)*sin(2*th)*(-30*suv.components[8] + 10*sqrt(3)*suv.components[16] + 5*sqrt(6)*suv.components[24] + 3*sqrt(10)*suv.components[32] + 12*sqrt(15)*suv.components[40]))/60.;
(suv_rot) . components[37]+=sin(del)*sin(th)*suv.components[9] - cos(del)*sin(th)*suv.components[15] + cos(th)*suv.components[37];
(suv_rot) . components[38]+=sin(del)*sin(th)*suv.components[10] - cos(del)*sin(th)*suv.components[22] + cos(th)*suv.components[38];
(suv_rot) . components[39]+=sin(del)*sin(th)*suv.components[11] - cos(del)*sin(th)*suv.components[29] + cos(th)*suv.components[39];
(suv_rot) . components[40]+=(sin(th)*sin(th)*(2*sqrt(15)*suv.components[8] - 2*sqrt(5)*suv.components[16] - sqrt(10)*suv.components[24] - sqrt(6)*suv.components[32]) - 2*sqrt(15)*sin(2*th)*(cos(del)*suv.components[12] + sin(del)*suv.components[36]) + 2*(2 + 3*cos(2*th))*suv.components[40])/10.;
(suv_rot) . components[41]+=cos(del)*sin(th)*suv.components[13] + cos(th)*suv.components[41] + sin(del)*sin(th)*suv.components[43];
(suv_rot) . components[42]+=suv.components[42];
(suv_rot) . components[43]+=cos(th)*suv.components[43] - sin(th)*(sin(del)*suv.components[41] + cos(del)*suv.components[47]);
(suv_rot) . components[44]+=suv.components[44];
(suv_rot) . components[45]+=suv.components[45];
(suv_rot) . components[46]+=suv.components[46];
(suv_rot) . components[47]+=-(sin(del)*sin(th)*suv.components[13]) + cos(del)*sin(th)*suv.components[43] + cos(th)*suv.components[47];
(suv_rot) . components[48]+=suv.components[48];