 /******************************************************************************
 *    This program is free software: you can redistribute it and/or modify     *
 *   it under the terms of the GNU General Public License as published by      *
 *   the Free Software Foundation, either version 3 of the License, or         *
 *   (at your option) any later version.                                       *
 *                                                                             *
 *   This program is distributed in the hope that it will be useful,           *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *
 *   GNU General Public License for more details.                              *
 *                                                                             *
 *   You should have received a copy of the GNU General Public License         *
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.     *
 *                                                                             *   
 *   Authors:                                                                  *
 *      Carlos Arguelles (University of Wisconsin Madison)                     * 
 *         carguelles@icecube.wisc.edu                                         *
 *      Jordi Salvado (University of Wisconsin Madison)                        *
 *         jsalvado@icecube.wisc.edu                                           *
 *      Christopher Weaver (University of Wisconsin Madison)                   * 
 *         cweaver@icecube.wisc.edu                                            *
 ******************************************************************************/
(suv_rot) . components[0]+=suv.components[0];
(suv_rot) . components[1]+=suv.components[1];
(suv_rot) . components[2]+=cos(th)*suv.components[2] - sin(th)*(cos(del)*suv.components[3] + sin(del)*suv.components[21]);
(suv_rot) . components[3]+=cos(del)*sin(th)*suv.components[2] + cos(th)*suv.components[3] - sin(del)*sin(th)*suv.components[14];
(suv_rot) . components[4]+=suv.components[4];
(suv_rot) . components[5]+=suv.components[5];
(suv_rot) . components[6]+=suv.components[6];
(suv_rot) . components[7]+=suv.components[7];
(suv_rot) . components[8]+=suv.components[8];
(suv_rot) . components[9]+=cos(th)*suv.components[9] - sin(th)*(cos(del)*suv.components[10] + sin(del)*suv.components[22]);
(suv_rot) . components[10]+=cos(del)*sin(th)*suv.components[9] + cos(th)*suv.components[10] - sin(del)*sin(th)*suv.components[15];
(suv_rot) . components[11]+=suv.components[11];
(suv_rot) . components[12]+=suv.components[12];
(suv_rot) . components[13]+=suv.components[13];
(suv_rot) . components[14]+=sin(del)*sin(th)*suv.components[3] + cos(th)*suv.components[14] - cos(del)*sin(th)*suv.components[21];
(suv_rot) . components[15]+=sin(del)*sin(th)*suv.components[10] + cos(th)*suv.components[15] - cos(del)*sin(th)*suv.components[22];
(suv_rot) . components[16]+=((2 + cos(2*th))*suv.components[16] + sqrt(3)*sin(2*th)*(cos(del)*suv.components[17] + sin(del)*suv.components[23]) + 2*sqrt(2)*sin(th)*sin(th)*suv.components[24])/3.;
(suv_rot) . components[17]+=(cos(th)*cos(th) - cos(2*del)*sin(th)*sin(th))*suv.components[17] - sin(2*del)*sin(th)*sin(th)*suv.components[23] + (cos(del)*sin(2*th)*(-suv.components[16] + sqrt(2)*suv.components[24]))/sqrt(3);
(suv_rot) . components[18]+=cos(th)*suv.components[18] + sin(th)*(-(cos(del)*suv.components[25]) + sin(del)*suv.components[31]);
(suv_rot) . components[19]+=cos(th)*suv.components[19] + sin(th)*(-(cos(del)*suv.components[26]) + sin(del)*suv.components[38]);
(suv_rot) . components[20]+=cos(th)*suv.components[20] + sin(th)*(-(cos(del)*suv.components[27]) + sin(del)*suv.components[45]);
(suv_rot) . components[21]+=sin(del)*sin(th)*suv.components[2] + cos(del)*sin(th)*suv.components[14] + cos(th)*suv.components[21];
(suv_rot) . components[22]+=sin(del)*sin(th)*suv.components[9] + cos(del)*sin(th)*suv.components[15] + cos(th)*suv.components[22];
(suv_rot) . components[23]+=-(sin(2*del)*sin(th)*sin(th)*suv.components[17]) + (cos(th)*cos(th) + cos(2*del)*sin(th)*sin(th))*suv.components[23] + (sin(del)*sin(2*th)*(-suv.components[16] + sqrt(2)*suv.components[24]))/sqrt(3);
(suv_rot) . components[24]+=(2*sqrt(2)*sin(th)*sin(th)*suv.components[16] - sqrt(6)*sin(2*th)*(cos(del)*suv.components[17] + sin(del)*suv.components[23]) + (1 + 2*cos(2*th))*suv.components[24])/3.;
(suv_rot) . components[25]+=cos(del)*sin(th)*suv.components[18] + cos(th)*suv.components[25] + sin(del)*sin(th)*suv.components[30];
(suv_rot) . components[26]+=cos(del)*sin(th)*suv.components[19] + cos(th)*suv.components[26] + sin(del)*sin(th)*suv.components[37];
(suv_rot) . components[27]+=cos(del)*sin(th)*suv.components[20] + cos(th)*suv.components[27] + sin(del)*sin(th)*suv.components[44];
(suv_rot) . components[28]+=suv.components[28];
(suv_rot) . components[29]+=suv.components[29];
(suv_rot) . components[30]+=cos(th)*suv.components[30] - sin(th)*(sin(del)*suv.components[25] + cos(del)*suv.components[31]);
(suv_rot) . components[31]+=-(sin(del)*sin(th)*suv.components[18]) + cos(del)*sin(th)*suv.components[30] + cos(th)*suv.components[31];
(suv_rot) . components[32]+=suv.components[32];
(suv_rot) . components[33]+=suv.components[33];
(suv_rot) . components[34]+=suv.components[34];
(suv_rot) . components[35]+=suv.components[35];
(suv_rot) . components[36]+=suv.components[36];
(suv_rot) . components[37]+=cos(th)*suv.components[37] - sin(th)*(sin(del)*suv.components[26] + cos(del)*suv.components[38]);
(suv_rot) . components[38]+=-(sin(del)*sin(th)*suv.components[19]) + cos(del)*sin(th)*suv.components[37] + cos(th)*suv.components[38];
(suv_rot) . components[39]+=suv.components[39];
(suv_rot) . components[40]+=suv.components[40];
(suv_rot) . components[41]+=suv.components[41];
(suv_rot) . components[42]+=suv.components[42];
(suv_rot) . components[43]+=suv.components[43];
(suv_rot) . components[44]+=cos(th)*suv.components[44] - sin(th)*(sin(del)*suv.components[27] + cos(del)*suv.components[45]);
(suv_rot) . components[45]+=-(sin(del)*sin(th)*suv.components[20]) + cos(del)*sin(th)*suv.components[44] + cos(th)*suv.components[45];
(suv_rot) . components[46]+=suv.components[46];
(suv_rot) . components[47]+=suv.components[47];
(suv_rot) . components[48]+=suv.components[48];