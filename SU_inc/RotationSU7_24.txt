 /******************************************************************************
 *    This program is free software: you can redistribute it and/or modify     *
 *   it under the terms of the GNU General Public License as published by      *
 *   the Free Software Foundation, either version 3 of the License, or         *
 *   (at your option) any later version.                                       *
 *                                                                             *
 *   This program is distributed in the hope that it will be useful,           *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *
 *   GNU General Public License for more details.                              *
 *                                                                             *
 *   You should have received a copy of the GNU General Public License         *
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.     *
 *                                                                             *   
 *   Authors:                                                                  *
 *      Carlos Arguelles (University of Wisconsin Madison)                     * 
 *         carguelles@icecube.wisc.edu                                         *
 *      Jordi Salvado (University of Wisconsin Madison)                        *
 *         jsalvado@icecube.wisc.edu                                           *
 *      Christopher Weaver (University of Wisconsin Madison)                   * 
 *         cweaver@icecube.wisc.edu                                            *
 ******************************************************************************/
(suv_rot) . components[0]+=suv.components[0];
(suv_rot) . components[1]+=cos(th)*suv.components[1] - sin(th)*(cos(del)*suv.components[3] + sin(del)*suv.components[21]);
(suv_rot) . components[2]+=suv.components[2];
(suv_rot) . components[3]+=cos(del)*sin(th)*suv.components[1] + cos(th)*suv.components[3] - sin(del)*sin(th)*suv.components[7];
(suv_rot) . components[4]+=suv.components[4];
(suv_rot) . components[5]+=suv.components[5];
(suv_rot) . components[6]+=suv.components[6];
(suv_rot) . components[7]+=sin(del)*sin(th)*suv.components[3] + cos(th)*suv.components[7] - cos(del)*sin(th)*suv.components[21];
(suv_rot) . components[8]+=((3 + cos(2*th))*suv.components[8])/4. + (sin(th)*(6*cos(th)*(cos(del)*suv.components[10] + sin(del)*suv.components[22]) + sqrt(3)*sin(th)*(suv.components[16] + 2*sqrt(2)*suv.components[24])))/6.;
(suv_rot) . components[9]+=cos(th)*suv.components[9] - sin(th)*(cos(del)*suv.components[17] + sin(del)*suv.components[23]);
(suv_rot) . components[10]+=(cos(th)*cos(th) - cos(2*del)*sin(th)*sin(th))*suv.components[10] - sin(2*del)*sin(th)*sin(th)*suv.components[22] + (cos(del)*sin(2*th)*(-3*suv.components[8] + sqrt(3)*suv.components[16] + 2*sqrt(6)*suv.components[24]))/6.;
(suv_rot) . components[11]+=cos(th)*suv.components[11] + sin(th)*(-(cos(del)*suv.components[25]) + sin(del)*suv.components[31]);
(suv_rot) . components[12]+=cos(th)*suv.components[12] + sin(th)*(-(cos(del)*suv.components[26]) + sin(del)*suv.components[38]);
(suv_rot) . components[13]+=cos(th)*suv.components[13] + sin(th)*(-(cos(del)*suv.components[27]) + sin(del)*suv.components[45]);
(suv_rot) . components[14]+=suv.components[14];
(suv_rot) . components[15]+=cos(th)*suv.components[15] + sin(th)*(-(sin(del)*suv.components[17]) + cos(del)*suv.components[23]);
(suv_rot) . components[16]+=((11 + cos(2*th))*suv.components[16] - 2*sqrt(3)*sin(2*th)*(cos(del)*suv.components[10] + sin(del)*suv.components[22]) + 2*sin(th)*sin(th)*(sqrt(3)*suv.components[8] - 2*sqrt(2)*suv.components[24]))/12.;
(suv_rot) . components[17]+=cos(del)*sin(th)*suv.components[9] + sin(del)*sin(th)*suv.components[15] + cos(th)*suv.components[17];
(suv_rot) . components[18]+=suv.components[18];
(suv_rot) . components[19]+=suv.components[19];
(suv_rot) . components[20]+=suv.components[20];
(suv_rot) . components[21]+=sin(del)*sin(th)*suv.components[1] + cos(del)*sin(th)*suv.components[7] + cos(th)*suv.components[21];
(suv_rot) . components[22]+=(cos(del)*cos(del) + cos(2*th)*sin(del)*sin(del))*suv.components[22] + (sin(del)*sin(th)*(-6*cos(del)*sin(th)*suv.components[10] + cos(th)*(-3*suv.components[8] + sqrt(3)*suv.components[16] + 2*sqrt(6)*suv.components[24])))/3.;
(suv_rot) . components[23]+=sin(del)*sin(th)*suv.components[9] - cos(del)*sin(th)*suv.components[15] + cos(th)*suv.components[23];
(suv_rot) . components[24]+=(sqrt(2)*sin(th)*sin(th)*(sqrt(3)*suv.components[8] - suv.components[16]) - sqrt(6)*sin(2*th)*(cos(del)*suv.components[10] + sin(del)*suv.components[22]) + (1 + 2*cos(2*th))*suv.components[24])/3.;
(suv_rot) . components[25]+=cos(del)*sin(th)*suv.components[11] + cos(th)*suv.components[25] + sin(del)*sin(th)*suv.components[29];
(suv_rot) . components[26]+=cos(del)*sin(th)*suv.components[12] + cos(th)*suv.components[26] + sin(del)*sin(th)*suv.components[36];
(suv_rot) . components[27]+=cos(del)*sin(th)*suv.components[13] + cos(th)*suv.components[27] + sin(del)*sin(th)*suv.components[43];
(suv_rot) . components[28]+=suv.components[28];
(suv_rot) . components[29]+=cos(th)*suv.components[29] - sin(th)*(sin(del)*suv.components[25] + cos(del)*suv.components[31]);
(suv_rot) . components[30]+=suv.components[30];
(suv_rot) . components[31]+=-(sin(del)*sin(th)*suv.components[11]) + cos(del)*sin(th)*suv.components[29] + cos(th)*suv.components[31];
(suv_rot) . components[32]+=suv.components[32];
(suv_rot) . components[33]+=suv.components[33];
(suv_rot) . components[34]+=suv.components[34];
(suv_rot) . components[35]+=suv.components[35];
(suv_rot) . components[36]+=cos(th)*suv.components[36] - sin(th)*(sin(del)*suv.components[26] + cos(del)*suv.components[38]);
(suv_rot) . components[37]+=suv.components[37];
(suv_rot) . components[38]+=-(sin(del)*sin(th)*suv.components[12]) + cos(del)*sin(th)*suv.components[36] + cos(th)*suv.components[38];
(suv_rot) . components[39]+=suv.components[39];
(suv_rot) . components[40]+=suv.components[40];
(suv_rot) . components[41]+=suv.components[41];
(suv_rot) . components[42]+=suv.components[42];
(suv_rot) . components[43]+=cos(th)*suv.components[43] - sin(th)*(sin(del)*suv.components[27] + cos(del)*suv.components[45]);
(suv_rot) . components[44]+=suv.components[44];
(suv_rot) . components[45]+=-(sin(del)*sin(th)*suv.components[13]) + cos(del)*sin(th)*suv.components[43] + cos(th)*suv.components[45];
(suv_rot) . components[46]+=suv.components[46];
(suv_rot) . components[47]+=suv.components[47];
(suv_rot) . components[48]+=suv.components[48];