 /******************************************************************************
 *    This program is free software: you can redistribute it and/or modify     *
 *   it under the terms of the GNU General Public License as published by      *
 *   the Free Software Foundation, either version 3 of the License, or         *
 *   (at your option) any later version.                                       *
 *                                                                             *
 *   This program is distributed in the hope that it will be useful,           *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *
 *   GNU General Public License for more details.                              *
 *                                                                             *
 *   You should have received a copy of the GNU General Public License         *
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.     *
 *                                                                             *   
 *   Authors:                                                                  *
 *      Carlos Arguelles (University of Wisconsin Madison)                     * 
 *         carguelles@icecube.wisc.edu                                         *
 *      Jordi Salvado (University of Wisconsin Madison)                        *
 *         jsalvado@icecube.wisc.edu                                           *
 *      Christopher Weaver (University of Wisconsin Madison)                   * 
 *         cweaver@icecube.wisc.edu                                            *
 ******************************************************************************/
(suv_rot) . components[0]+=suv.components[0];
(suv_rot) . components[1]+=(cos(th)*cos(th) - cos(2*del)*sin(th)*sin(th))*suv.components[1] + cos(del)*(-2*sin(del)*sin(th)*sin(th)*suv.components[9] + sin(2*th)*suv.components[10]);
(suv_rot) . components[2]+=cos(th)*suv.components[2] + sin(th)*(-(cos(del)*suv.components[11]) + sin(del)*suv.components[19]);
(suv_rot) . components[3]+=cos(th)*suv.components[3] + sin(th)*(-(cos(del)*suv.components[12]) + sin(del)*suv.components[28]);
(suv_rot) . components[4]+=cos(th)*suv.components[4] + sin(th)*(-(cos(del)*suv.components[13]) + sin(del)*suv.components[37]);
(suv_rot) . components[5]+=cos(th)*suv.components[5] + sin(th)*(-(cos(del)*suv.components[14]) + sin(del)*suv.components[46]);
(suv_rot) . components[6]+=cos(th)*suv.components[6] + sin(th)*(-(cos(del)*suv.components[15]) + sin(del)*suv.components[55]);
(suv_rot) . components[7]+=cos(th)*suv.components[7] + sin(th)*(-(cos(del)*suv.components[16]) + sin(del)*suv.components[64]);
(suv_rot) . components[8]+=cos(th)*suv.components[8] + sin(th)*(-(cos(del)*suv.components[17]) + sin(del)*suv.components[73]);
(suv_rot) . components[9]+=-2*cos(del)*sin(del)*sin(th)*sin(th)*suv.components[1] + (cos(th)*cos(th) + cos(2*del)*sin(th)*sin(th))*suv.components[9] + sin(del)*sin(2*th)*suv.components[10];
(suv_rot) . components[10]+=-(sin(2*th)*(cos(del)*suv.components[1] + sin(del)*suv.components[9])) + cos(2*th)*suv.components[10];
(suv_rot) . components[11]+=cos(del)*sin(th)*suv.components[2] + cos(th)*suv.components[11] + sin(del)*sin(th)*suv.components[18];
(suv_rot) . components[12]+=cos(del)*sin(th)*suv.components[3] + cos(th)*suv.components[12] + sin(del)*sin(th)*suv.components[27];
(suv_rot) . components[13]+=cos(del)*sin(th)*suv.components[4] + cos(th)*suv.components[13] + sin(del)*sin(th)*suv.components[36];
(suv_rot) . components[14]+=cos(del)*sin(th)*suv.components[5] + cos(th)*suv.components[14] + sin(del)*sin(th)*suv.components[45];
(suv_rot) . components[15]+=cos(del)*sin(th)*suv.components[6] + cos(th)*suv.components[15] + sin(del)*sin(th)*suv.components[54];
(suv_rot) . components[16]+=cos(del)*sin(th)*suv.components[7] + cos(th)*suv.components[16] + sin(del)*sin(th)*suv.components[63];
(suv_rot) . components[17]+=cos(del)*sin(th)*suv.components[8] + cos(th)*suv.components[17] + sin(del)*sin(th)*suv.components[72];
(suv_rot) . components[18]+=cos(th)*suv.components[18] - sin(th)*(sin(del)*suv.components[11] + cos(del)*suv.components[19]);
(suv_rot) . components[19]+=-(sin(del)*sin(th)*suv.components[2]) + cos(del)*sin(th)*suv.components[18] + cos(th)*suv.components[19];
(suv_rot) . components[20]+=suv.components[20];
(suv_rot) . components[21]+=suv.components[21];
(suv_rot) . components[22]+=suv.components[22];
(suv_rot) . components[23]+=suv.components[23];
(suv_rot) . components[24]+=suv.components[24];
(suv_rot) . components[25]+=suv.components[25];
(suv_rot) . components[26]+=suv.components[26];
(suv_rot) . components[27]+=cos(th)*suv.components[27] - sin(th)*(sin(del)*suv.components[12] + cos(del)*suv.components[28]);
(suv_rot) . components[28]+=-(sin(del)*sin(th)*suv.components[3]) + cos(del)*sin(th)*suv.components[27] + cos(th)*suv.components[28];
(suv_rot) . components[29]+=suv.components[29];
(suv_rot) . components[30]+=suv.components[30];
(suv_rot) . components[31]+=suv.components[31];
(suv_rot) . components[32]+=suv.components[32];
(suv_rot) . components[33]+=suv.components[33];
(suv_rot) . components[34]+=suv.components[34];
(suv_rot) . components[35]+=suv.components[35];
(suv_rot) . components[36]+=cos(th)*suv.components[36] - sin(th)*(sin(del)*suv.components[13] + cos(del)*suv.components[37]);
(suv_rot) . components[37]+=-(sin(del)*sin(th)*suv.components[4]) + cos(del)*sin(th)*suv.components[36] + cos(th)*suv.components[37];
(suv_rot) . components[38]+=suv.components[38];
(suv_rot) . components[39]+=suv.components[39];
(suv_rot) . components[40]+=suv.components[40];
(suv_rot) . components[41]+=suv.components[41];
(suv_rot) . components[42]+=suv.components[42];
(suv_rot) . components[43]+=suv.components[43];
(suv_rot) . components[44]+=suv.components[44];
(suv_rot) . components[45]+=cos(th)*suv.components[45] - sin(th)*(sin(del)*suv.components[14] + cos(del)*suv.components[46]);
(suv_rot) . components[46]+=-(sin(del)*sin(th)*suv.components[5]) + cos(del)*sin(th)*suv.components[45] + cos(th)*suv.components[46];
(suv_rot) . components[47]+=suv.components[47];
(suv_rot) . components[48]+=suv.components[48];
(suv_rot) . components[49]+=suv.components[49];
(suv_rot) . components[50]+=suv.components[50];
(suv_rot) . components[51]+=suv.components[51];
(suv_rot) . components[52]+=suv.components[52];
(suv_rot) . components[53]+=suv.components[53];
(suv_rot) . components[54]+=cos(th)*suv.components[54] - sin(th)*(sin(del)*suv.components[15] + cos(del)*suv.components[55]);
(suv_rot) . components[55]+=-(sin(del)*sin(th)*suv.components[6]) + cos(del)*sin(th)*suv.components[54] + cos(th)*suv.components[55];
(suv_rot) . components[56]+=suv.components[56];
(suv_rot) . components[57]+=suv.components[57];
(suv_rot) . components[58]+=suv.components[58];
(suv_rot) . components[59]+=suv.components[59];
(suv_rot) . components[60]+=suv.components[60];
(suv_rot) . components[61]+=suv.components[61];
(suv_rot) . components[62]+=suv.components[62];
(suv_rot) . components[63]+=cos(th)*suv.components[63] - sin(th)*(sin(del)*suv.components[16] + cos(del)*suv.components[64]);
(suv_rot) . components[64]+=-(sin(del)*sin(th)*suv.components[7]) + cos(del)*sin(th)*suv.components[63] + cos(th)*suv.components[64];
(suv_rot) . components[65]+=suv.components[65];
(suv_rot) . components[66]+=suv.components[66];
(suv_rot) . components[67]+=suv.components[67];
(suv_rot) . components[68]+=suv.components[68];
(suv_rot) . components[69]+=suv.components[69];
(suv_rot) . components[70]+=suv.components[70];
(suv_rot) . components[71]+=suv.components[71];
(suv_rot) . components[72]+=cos(th)*suv.components[72] - sin(th)*(sin(del)*suv.components[17] + cos(del)*suv.components[73]);
(suv_rot) . components[73]+=-(sin(del)*sin(th)*suv.components[8]) + cos(del)*sin(th)*suv.components[72] + cos(th)*suv.components[73];
(suv_rot) . components[74]+=suv.components[74];
(suv_rot) . components[75]+=suv.components[75];
(suv_rot) . components[76]+=suv.components[76];
(suv_rot) . components[77]+=suv.components[77];
(suv_rot) . components[78]+=suv.components[78];
(suv_rot) . components[79]+=suv.components[79];
(suv_rot) . components[80]+=suv.components[80];