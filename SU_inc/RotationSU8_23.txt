 /******************************************************************************
 *    This program is free software: you can redistribute it and/or modify     *
 *   it under the terms of the GNU General Public License as published by      *
 *   the Free Software Foundation, either version 3 of the License, or         *
 *   (at your option) any later version.                                       *
 *                                                                             *
 *   This program is distributed in the hope that it will be useful,           *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *
 *   GNU General Public License for more details.                              *
 *                                                                             *
 *   You should have received a copy of the GNU General Public License         *
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.     *
 *                                                                             *   
 *   Authors:                                                                  *
 *      Carlos Arguelles (University of Wisconsin Madison)                     * 
 *         carguelles@icecube.wisc.edu                                         *
 *      Jordi Salvado (University of Wisconsin Madison)                        *
 *         jsalvado@icecube.wisc.edu                                           *
 *      Christopher Weaver (University of Wisconsin Madison)                   * 
 *         cweaver@icecube.wisc.edu                                            *
 ******************************************************************************/
(suv_rot) . components[0]+=suv.components[0];
(suv_rot) . components[1]+=cos(th)*suv.components[1] - sin(th)*(cos(del)*suv.components[2] + sin(del)*suv.components[16]);
(suv_rot) . components[2]+=cos(del)*sin(th)*suv.components[1] + cos(th)*suv.components[2] - sin(del)*sin(th)*suv.components[8];
(suv_rot) . components[3]+=suv.components[3];
(suv_rot) . components[4]+=suv.components[4];
(suv_rot) . components[5]+=suv.components[5];
(suv_rot) . components[6]+=suv.components[6];
(suv_rot) . components[7]+=suv.components[7];
(suv_rot) . components[8]+=sin(del)*sin(th)*suv.components[2] + cos(th)*suv.components[8] - cos(del)*sin(th)*suv.components[16];
(suv_rot) . components[9]+=((3 + cos(2*th))*suv.components[9] + 2*sin(th)*(2*cos(th)*(cos(del)*suv.components[10] + sin(del)*suv.components[17]) + sqrt(3)*sin(th)*suv.components[18]))/4.;
(suv_rot) . components[10]+=-(cos(del)*cos(th)*sin(th)*suv.components[9]) + (cos(th)*cos(th) - cos(2*del)*sin(th)*sin(th))*suv.components[10] + cos(del)*sin(th)*(-2*sin(del)*sin(th)*suv.components[17] + sqrt(3)*cos(th)*suv.components[18]);
(suv_rot) . components[11]+=cos(th)*suv.components[11] + sin(th)*(-(cos(del)*suv.components[19]) + sin(del)*suv.components[26]);
(suv_rot) . components[12]+=cos(th)*suv.components[12] + sin(th)*(-(cos(del)*suv.components[20]) + sin(del)*suv.components[34]);
(suv_rot) . components[13]+=cos(th)*suv.components[13] + sin(th)*(-(cos(del)*suv.components[21]) + sin(del)*suv.components[42]);
(suv_rot) . components[14]+=cos(th)*suv.components[14] + sin(th)*(-(cos(del)*suv.components[22]) + sin(del)*suv.components[50]);
(suv_rot) . components[15]+=cos(th)*suv.components[15] + sin(th)*(-(cos(del)*suv.components[23]) + sin(del)*suv.components[58]);
(suv_rot) . components[16]+=sin(del)*sin(th)*suv.components[1] + cos(del)*sin(th)*suv.components[8] + cos(th)*suv.components[16];
(suv_rot) . components[17]+=(cos(th)*cos(th) + cos(2*del)*sin(th)*sin(th))*suv.components[17] - sin(th)*(sin(2*del)*sin(th)*suv.components[10] + cos(th)*sin(del)*(suv.components[9] - sqrt(3)*suv.components[18]));
(suv_rot) . components[18]+=(2*sqrt(3)*sin(th)*sin(th)*suv.components[9] - 2*sqrt(3)*sin(2*th)*(cos(del)*suv.components[10] + sin(del)*suv.components[17]) + (1 + 3*cos(2*th))*suv.components[18])/4.;
(suv_rot) . components[19]+=cos(del)*sin(th)*suv.components[11] + cos(th)*suv.components[19] + sin(del)*sin(th)*suv.components[25];
(suv_rot) . components[20]+=cos(del)*sin(th)*suv.components[12] + cos(th)*suv.components[20] + sin(del)*sin(th)*suv.components[33];
(suv_rot) . components[21]+=cos(del)*sin(th)*suv.components[13] + cos(th)*suv.components[21] + sin(del)*sin(th)*suv.components[41];
(suv_rot) . components[22]+=cos(del)*sin(th)*suv.components[14] + cos(th)*suv.components[22] + sin(del)*sin(th)*suv.components[49];
(suv_rot) . components[23]+=cos(del)*sin(th)*suv.components[15] + cos(th)*suv.components[23] + sin(del)*sin(th)*suv.components[57];
(suv_rot) . components[24]+=suv.components[24];
(suv_rot) . components[25]+=cos(th)*suv.components[25] - sin(th)*(sin(del)*suv.components[19] + cos(del)*suv.components[26]);
(suv_rot) . components[26]+=-(sin(del)*sin(th)*suv.components[11]) + cos(del)*sin(th)*suv.components[25] + cos(th)*suv.components[26];
(suv_rot) . components[27]+=suv.components[27];
(suv_rot) . components[28]+=suv.components[28];
(suv_rot) . components[29]+=suv.components[29];
(suv_rot) . components[30]+=suv.components[30];
(suv_rot) . components[31]+=suv.components[31];
(suv_rot) . components[32]+=suv.components[32];
(suv_rot) . components[33]+=cos(th)*suv.components[33] - sin(th)*(sin(del)*suv.components[20] + cos(del)*suv.components[34]);
(suv_rot) . components[34]+=-(sin(del)*sin(th)*suv.components[12]) + cos(del)*sin(th)*suv.components[33] + cos(th)*suv.components[34];
(suv_rot) . components[35]+=suv.components[35];
(suv_rot) . components[36]+=suv.components[36];
(suv_rot) . components[37]+=suv.components[37];
(suv_rot) . components[38]+=suv.components[38];
(suv_rot) . components[39]+=suv.components[39];
(suv_rot) . components[40]+=suv.components[40];
(suv_rot) . components[41]+=cos(th)*suv.components[41] - sin(th)*(sin(del)*suv.components[21] + cos(del)*suv.components[42]);
(suv_rot) . components[42]+=-(sin(del)*sin(th)*suv.components[13]) + cos(del)*sin(th)*suv.components[41] + cos(th)*suv.components[42];
(suv_rot) . components[43]+=suv.components[43];
(suv_rot) . components[44]+=suv.components[44];
(suv_rot) . components[45]+=suv.components[45];
(suv_rot) . components[46]+=suv.components[46];
(suv_rot) . components[47]+=suv.components[47];
(suv_rot) . components[48]+=suv.components[48];
(suv_rot) . components[49]+=cos(th)*suv.components[49] - sin(th)*(sin(del)*suv.components[22] + cos(del)*suv.components[50]);
(suv_rot) . components[50]+=-(sin(del)*sin(th)*suv.components[14]) + cos(del)*sin(th)*suv.components[49] + cos(th)*suv.components[50];
(suv_rot) . components[51]+=suv.components[51];
(suv_rot) . components[52]+=suv.components[52];
(suv_rot) . components[53]+=suv.components[53];
(suv_rot) . components[54]+=suv.components[54];
(suv_rot) . components[55]+=suv.components[55];
(suv_rot) . components[56]+=suv.components[56];
(suv_rot) . components[57]+=cos(th)*suv.components[57] - sin(th)*(sin(del)*suv.components[23] + cos(del)*suv.components[58]);
(suv_rot) . components[58]+=-(sin(del)*sin(th)*suv.components[15]) + cos(del)*sin(th)*suv.components[57] + cos(th)*suv.components[58];
(suv_rot) . components[59]+=suv.components[59];
(suv_rot) . components[60]+=suv.components[60];
(suv_rot) . components[61]+=suv.components[61];
(suv_rot) . components[62]+=suv.components[62];
(suv_rot) . components[63]+=suv.components[63];